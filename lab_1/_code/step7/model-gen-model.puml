@startuml

skinparam BackgroundColor  WhiteSmoke

skinparam class {
FontSize 13
BackgroundColor<<Apache>> Red
BorderColor<<Apache>> #FF6655
FontName Droid Sans
BorderColor black
BackgroundColor DarkGoldenRod
ArrowFontName Fira Code
ArrowColor #FF6655
ArrowFontColor #FFFFFF
}

' DSL are with squares
' Embedded are with circles
' Compilers / Transpilations are with : ?

class Abstract <<(L,orchid)>> {
    - Specification language L1
}

Abstract -> PlantUML
(Abstract, PlantUML) . SeeUML
SeeUML --|> Visualisation

class SeeUML <<(P,orange)>> {
    projection : L1 ðŸ¡’ PlantUML
}




class AST <<(E,lightgreen)>> {
    + Ocaml
}

AST --|> MetaModel : "types"


class PlantUML <<(L,orchid)>> {
    - UML diagrams
}


class Executable <<(E,lightgreen)>> {
    + Arduino C
}

class Storage << (L,orchid) >> {
    - Implementation language L2
}

class "Menhir G0" <<(P,orange)>> {
    lexer/parser : L1 ðŸ¡’ MetaModel
}

class MetaModel <<(R,red)>> {
    terms description
    type constraints
}

Abstract -> MetaModel
(Abstract, MetaModel) . "Menhir G0"

class "Angstrom G1" <<(P,orange)>> {
    lexer/parser : L2 ðŸ¡’ AST
}

class "Ocaml G2" <<(P,orange)>> {
    compiler : AST ðŸ¡’ C
}

"Ocaml G2" --|> Compilation

abstract class Projection {
    fonction : langage ðŸ¡’ langage
}

abstract class Visualisation {
    fonction : langage L ðŸ¡’ DSL visuel
}

abstract class "Lexer/Parser" {
    fonction : langage L ðŸ¡’ AST embedded
}

abstract class Compilation {
    fonction : AST embedded ðŸ¡’ code source
}

Compilation --|> Projection 
Visualisation --|> Projection 
"Lexer/Parser" --|> Projection

"Menhir G0" --|> "Lexer/Parser"
"Angstrom G1" --|> "Lexer/Parser"

Storage -> AST 
(Storage, AST) . "Angstrom G1"
AST -> Executable
(AST, Executable) . "Ocaml G2"

MetaModel <|-- Storage : "termes"

@enduml